type: edu
custom_name: stage6
files:
- name: test/SearchEngineTests.java
  visible: false
  text: |
    public class SearchEngineTests {
        public static final String NAMES = "Kristofer Galley\n" +
            "Fernando Marbury fernando_marbury@gmail.com\n" +
            "Kristyn Nix nix-kris@gmail.com\n" +
            "Regenia Enderle\n" +
            "Malena Gray\n" +
            "Colette Mattei\n" +
            "Wendolyn Mcphillips\n" +
            "Jim Gray\n" +
            "Coreen Beckham\n" +
            "Bob Yeh bobyeah@gmail.com\n" +
            "Shannan Bob stropeshah@gmail.com\n" +
            "Yer Fillion\n" +
            "Margene Resendez marres@gmail.com\n" +
            "Blossom Ambler\n" +
            "Teri Ledet teri_ledet@gmail.com\n" +
            "Dana Baron baron@gmail.com\n" +
            "Abram Goldsberry\n" +
            "Yer Leopold\n" +
            "Stefania Trunzo\n" +
            "Alexis Leopold\n" +
            "Carlene Bob\n" +
            "Oliver Dacruz\n" +
            "Jonie Richter\n" +
            "Pasquale Gallien gallien@evilcorp.com\n" +
            "Verdie Gentle\n" +
            "Gerardo Strouth gallien@evilcorp.com\n" +
            "Agripina Bob\n" +
            "Latricia Niebuhr\n" +
            "Malena Schommer\n" +
            "Drema Leopold\n" +
            "Heide Payeur\n" +
            "Ranae Digiovanni\n" +
            "Simona Pereira\n" +
            "Nick Digiovanni\n" +
            "Angelita Wigington gallien@evilcorp.com\n" +
            "Elin Gray\n" +
            "Dwain Trunzo\n" +
            "Boris Beiler\n" +
            "Remi Malek fsociefy@gmail.com\n" +
            "Demetria Hostetler gallien@evilcorp.com\n" +
            "Nydia Mcduffie\n" +
            "Florencio Defibaugh\n" +
            "Warner Giblin\n" +
            "Bob Mans\n" +
            "Shu Gray\n" +
            "Kaycee Gray\n" +
            "Victorina Froehlich victory@gmail.com\n" +
            "Roseanne Gray\n" +
            "Erica Radford hisam@gmail.com\n" +
            "Elyse Pauling";
    }
  learner_created: false
- name: test/SimpleSearchEngineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import search.MainKt;

    import java.util.*;

    class TestClue {
        String input;

        TestClue(String input) {
            this.input = input;
        }
    }

    public class SimpleSearchEngineTest extends StageTest<TestClue> {
        public SimpleSearchEngineTest() {
            super(MainKt.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return Arrays.asList(
                new TestCase<TestClue>().setAttach(
                    new TestClue("1\n" +
                    "ANY\n" +
                    "bob gallien@evilcorp.com\n" +
                    "2\n" +
                    "1\n" +
                    "NONE\n" +
                    "bob gallien@evilcorp.com\n" +
                    "0")).setInput("1\n" +
                    "ANY\n" +
                    "bob gallien@evilcorp.com\n" +
                    "2\n" +
                    "1\n" +
                    "NONE\n" +
                    "bob gallien@evilcorp.com\n" +
                    "0")
                    .addArguments("--data", "names.txt")
                    .addFile("names.txt", SearchEngineTests.NAMES),


                new TestCase<TestClue>().setAttach(new TestClue("2\n" +
                    "1\n" +
                    "ALL\n" +
                    "this text never gonna be matched\n" +
                    "2\n" +
                    "0")).setInput("2\n" +
                    "1\n" +
                    "ALL\n" +
                    "this text never gonna be matched\n" +
                    "2\n" +
                    "0")
                    .addArguments("--data", "names.txt")
                    .addFile("names.txt", SearchEngineTests.NAMES)
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String cR = "\n";
            List<String> outputLines = new LinkedList<String>(Arrays.asList(reply.split(cR)));
            String[] inputLines = clue.input.split(cR);
            String[] reference;

            reference = SearchEngineTests.NAMES.split("\n");

            //clear the list of unnecessary lines, if any
            List<String> cleanedOutput = new ArrayList<String>();
            for (int i = 0; i < outputLines.size(); i++) {
                if (containsItemFromList(outputLines.get(i), reference)) {
                    cleanedOutput.add(outputLines.get(i).toLowerCase());
                }
            }

            int currentInputLine = 0;
            int currentOutputLine = 0;

            int actionType = -1;

            while (actionType != 0) {
                try {
                    actionType = Integer.parseInt(inputLines[currentInputLine]);
                } catch (NumberFormatException e) {
                    return new CheckResult(false,
                        "The number of menu item must be number!");
                }

                switch (actionType) {
                    case 1:
                        currentInputLine++;

                        List<Integer> result = new ArrayList<>();

                        List<String> intendedResult = new ArrayList<>();

                        while (true) {
                            String mode = inputLines[currentInputLine].trim().toLowerCase();
                            currentInputLine++;

                            String toSearch = "";

                            if (mode.equalsIgnoreCase("all")) {
                                toSearch = inputLines[currentInputLine].trim().toLowerCase();
                                currentInputLine++;
                                String[] allChecks = toSearch.split(" ");

                                for (String s : reference) {
                                    s = s.toLowerCase();

                                    boolean isPassedChecks = true;

                                    for (String currCheck : allChecks) {
                                        if (!(s.contains(" " + currCheck + " ")
                                            || s.startsWith(currCheck + " ")
                                            || s.endsWith(" " + currCheck))) {

                                            isPassedChecks = false;
                                            break;
                                        }
                                    }

                                    if (isPassedChecks) {
                                        intendedResult.add(s);
                                    }
                                }
                                break;
                            } else if (mode.equalsIgnoreCase("any")) {
                                toSearch = inputLines[currentInputLine].trim().toLowerCase();
                                currentInputLine++;
                                String[] allChecks = toSearch.split(" ");

                                for (String s : reference) {
                                    s = s.toLowerCase();

                                    boolean isPassedChecks = false;

                                    for (String currCheck : allChecks) {
                                        if (s.contains(" " + currCheck + " ")
                                            || s.startsWith(currCheck + " ")
                                            || s.endsWith(" " + currCheck)) {

                                            isPassedChecks = true;
                                            break;
                                        }
                                    }

                                    if (isPassedChecks) {
                                        intendedResult.add(s);
                                    }
                                }
                                break;
                            } else if (mode.equalsIgnoreCase("none")) {
                                toSearch = inputLines[currentInputLine].trim().toLowerCase();
                                currentInputLine++;
                                String[] allChecks = toSearch.split(" ");

                                for (String s : reference) {
                                    s = s.toLowerCase();

                                    boolean isPassedChecks = true;

                                    for (String currCheck : allChecks) {
                                        if (s.contains(" " + currCheck + " ")
                                            || s.startsWith(currCheck + " ")
                                            || s.endsWith(" " + currCheck)) {

                                            isPassedChecks = false;
                                            break;
                                        }
                                    }

                                    if (isPassedChecks) {
                                        intendedResult.add(s);
                                    }
                                }
                                break;
                            }
                        }

                        String[] userResult = new String[intendedResult.size()];
                        for (int i = 0; i < intendedResult.size(); i++) {
                            try {
                                userResult[i] = cleanedOutput.get(currentOutputLine++);
                            } catch (IndexOutOfBoundsException e) {
                                return new CheckResult(false,
                                    "Seems like you output less than expected. " +
                                        "Either you've lost someone in the printing of all " +
                                        "people, or you haven't printed all the necessary " +
                                        "people in the search.");
                            }
                        }

                        String[] correctOutput = intendedResult.toArray(new String[0]);

                        Arrays.sort(correctOutput);
                        Arrays.sort(userResult);

                        if (!Arrays.equals(correctOutput, userResult)) {
                            return new CheckResult(false,
                                "Search result is not equal " +
                                    "to the expected search");
                        }
                        break;
                    case 2:
                        currentInputLine++;

                        List<String> intendedResultAll = new ArrayList<>();

                        for (String s : reference) {
                            s = s.toLowerCase();
                            intendedResultAll.add(s);
                        }

                        String[] userResultAll = new String[intendedResultAll.size()];
                        for (int i = 0; i < intendedResultAll.size(); i++) {
                            try {
                                userResultAll[i] = cleanedOutput.get(currentOutputLine++);
                            } catch (IndexOutOfBoundsException e) {
                                return new CheckResult(false,
                                    "Seems like you output less than expected. " +
                                        "Either you've lost someone in the printing of all " +
                                        "people, or you haven't printed all the necessary " +
                                        "people in the search.");
                            }
                        }

                        String[] correctOutputAll = intendedResultAll.toArray(new String[0]);

                        Arrays.sort(correctOutputAll);
                        Arrays.sort(userResultAll);

                        if (!Arrays.equals(correctOutputAll, userResultAll)) {
                            return new CheckResult(false,
                                "Looks like you're printing " +
                                    "unknown people when you enter option 2.");
                        }
                        break;
                    case 0:
                        return CheckResult.correct();
                    default:
                        currentInputLine++;
                        break;
                }
            }

            return CheckResult.correct();
        }

        private static boolean containsItemFromList(String inputStr, String[] items) {
            return Arrays.stream(items).parallel().anyMatch(inputStr::contains);
        }
    }
  learner_created: false
- name: src/search/states/IdleState.kt
  visible: true
  text: |-
    package search.states

    import search.SimpleSearchEngine

    class IdleState(engine: SimpleSearchEngine) : State(engine) {

        override fun run() {
            // Do nothing
        }
    }
  learner_created: true
- name: src/search/extensions/IO.kt
  visible: true
  text: |-
    package search.extensions

    operator fun String?.unaryPlus() = println(this)

    operator fun String?.unaryMinus() = print(this)
  learner_created: true
- name: src/search/states/State.kt
  visible: true
  text: |-
    package search.states

    import search.SimpleSearchEngine

    abstract class State(protected val engine: SimpleSearchEngine) {

        abstract fun run()
    }
  learner_created: true
- name: src/search/Main.kt
  visible: true
  text: "package search\n\nimport search.extensions.unaryPlus\nimport java.io.File\n\
    import java.util.Scanner\n\nfun main(vararg args: String) {\n    if (args.size\
    \ != 2 || args[0] != \"--data\") {\n        +\"Invalid arguments\"\n        return\n\
    \    }\n\n    val file = File(args[1])\n    if (!file.exists() || file.isDirectory\
    \ || !file.canRead()) {\n        +\"Invalid file\"\n        return\n    }\n\n\
    \    val scanner = Scanner(System.`in`)\n    val engine = SimpleSearchEngine()\n\
    \n    file.forEachLine {\n        engine += it\n    }\n\n    mainLoop@while (true)\
    \ {\n        +\"\"\"\n            \n            === Menu ===\n            1. Find\
    \ a person\n            2. Print all people\n            0. Exit\n        \"\"\
    \".trimIndent()\n        engine.idle()\n\n        val action = scanner.nextLine().toInt()\n\
    \n        +\"\"\n        when (action) {\n            1 -> {\n               \
    \ +\"Enter a name or email to search all suitable people.\"\n                engine\
    \ find scanner.nextLine().split(\"\\\\s+\".toRegex()).toTypedArray()\n       \
    \     }\n            2 -> {\n                +engine\n            }\n        \
    \    0 -> {\n                break@mainLoop\n            }\n            else ->\
    \ {\n                +\"Incorrect option! Try again.\"\n            }\n      \
    \  }\n    }\n\n    +\"\\nBye!\"\n}"
  learner_created: true
- name: src/search/SimpleSearchEngine.kt
  visible: true
  text: |-
    package search

    import search.states.AddToHaystackState
    import search.states.FindState
    import search.states.IdleState
    import search.states.PrintAllState
    import search.states.State

    class SimpleSearchEngine {

        private lateinit var _state: State

        val haystack = mutableListOf<String>()
        val invertedIndex = mutableMapOf<String, List<Int>>()

        var state: State
            get() = _state
            set(value) {
                _state = value
                _state.run()
            }

        init {
            idle()
        }

        fun idle() {
            state = IdleState(this)
        }

        fun addToHaystack(vararg items: String) {
            state = AddToHaystackState(this, *items)
        }

        operator fun plusAssign(item: String) = addToHaystack(item)

        operator fun plusAssign(items: Array<String>) = addToHaystack(*items)

        operator fun plusAssign(items: List<String>) = addToHaystack(*items.toTypedArray())

        infix fun find(needle: String) {
            state = FindState(this, needle)
        }

        infix fun find(needles: Array<String>) {
            state = FindState(this, *needles)
        }

        operator fun div(needle: String) = find(needle)

        fun printAll() {
            state = PrintAllState(this)
        }

        operator fun unaryPlus() = printAll()
    }
  learner_created: true
- name: src/search/states/AddToHaystackState.kt
  visible: true
  text: |-
    package search.states

    import search.SimpleSearchEngine

    class AddToHaystackState(engine: SimpleSearchEngine, private vararg val items: String) : State(engine) {

        override fun run() {
            val startIndex = engine.haystack.size

            engine.haystack.addAll(items)

            items.forEachIndexed { index, s ->
                val tokens = s.split("\\s+".toRegex())

                tokens.forEach {
                    val list = engine.invertedIndex[it]?.toMutableList() ?: mutableListOf()

                    list.add(startIndex + index)

                    engine.invertedIndex[it] = list
                }
            }
        }
    }
  learner_created: true
- name: src/search/states/FindState.kt
  visible: true
  text: |-
    package search.states

    import search.SimpleSearchEngine
    import search.extensions.unaryPlus

    class FindState(engine: SimpleSearchEngine, private vararg val needles: String) : State(engine) {

        override fun run() {
            val result = mutableListOf<String>()
            needles.forEach { needle ->
                engine.invertedIndex[needle]
                    ?.map { engine.haystack[it] }
                    ?.let {
                        result.addAll(it)
                    }
            }

            +if (result.isEmpty()) {
                "No matching people found."
            } else {
                "${result.size} persons found:\n${ result.joinToString("\n") }"
            }
        }
    }
  learner_created: true
- name: src/search/states/PrintAllState.kt
  visible: true
  text: |-
    package search.states

    import search.SimpleSearchEngine
    import search.extensions.unaryPlus

    class PrintAllState(engine: SimpleSearchEngine) : State(engine) {

        override fun run() {
            +"=== List of people ===\n${ engine.haystack.joinToString("\n") }"
        }
    }
  learner_created: true
- name: src/search/extensions/String.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/89/stages/499/implement
status: Solved
record: -1
